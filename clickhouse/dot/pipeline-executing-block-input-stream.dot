digraph blockIO {
  node[shape=box];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  subgraph cluster_QueryPipeline {
    graph[label="QueryPipeline";fontsize=20;];
    pipline_get_header[
      shape="record";
      label="{{
        getHeader
      }}";
    ];
    pipeline_getNumThreads;
    pipeline_getNumThreads[
      shape="record";
      label="{{
        getNumThreads|
        如果线程数\>1,就使用PullingAysncExecutor
      }}";
    ];
  }
  subgraph cluster_PullingPipelineExecutor {
    graph[label="PullingPipelineExecutor";fontsize=20;];
    getTotalsBlock;
    getExtremesBlock;
    execute_pull[
      shape="record";
      label="{{
        pull|
        执行pipeline
      }}";
    ];
    execute_get_header[
      shape="record";
      label="{{
        getHeader
      }}";
    ];
    PullingPipelineExecutor;
  }
  subgraph cluster_PullingAsyncPipelineExecutor {
    graph[label="PullingAsyncPipelineExecutor";fontsize=20;];
    async_executor_pull[
      shape="record";
      label="{{
        pull
      }}";
    ];
    async_execute_get_header[
      shape="record";
      label="{{
        getHeader
      }}";
    ];
    async_getTotalsBlock[
      shape="record";
      label="{{
      getTotalsBlock
      }}";
    ];
    async_getExtremesBlock[
      shape="record";
      label="{{
      getExtremesBlock
      }}";
    ];
    PullingAsyncPipelineExecutor;
  }
  subgraph cluster_PipelineExecutingBlockInputStream {
    graph[label="PipelineExecutingBlockInputStream";fontsize=20;];
    PipelineExecutingBlockInputStream[
      shape="record";
      label="{{
        PipelineExecutingBlockInputStream|
        Implement IBlockInputStream for QueryPipeline
      }}";
    ];
    PipelineExecutingBlockInputStream[
      shape="record";
      label="{{
        PipelineExecutingBlockInputStream|
        构造函数
      }}";
    ];
    getHeader -> {
      execute_get_header;
      async_execute_get_header;
      pipline_get_header;
    }[color="#17b978"];

    readPrefixImpl -> createExecutor;
    createExecutor[
      shape="record";
      label="{{
        createExecutor|
        根据queryPipeline线程数\l
        创建对应的executor\l
      }}";
    ];
    readImpl -> {
      execute_pull;
      async_executor_pull;
      async_execute_get_header;
      createExecutor;
      getTotalsBlock;
      getExtremesBlock;

      async_getTotalsBlock;
      async_getExtremesBlock;
    }[color="#b83b5e"];

    createExecutor -> {
      pipeline_getNumThreads;
      PullingAsyncPipelineExecutor;
      PullingPipelineExecutor;
    }
  }
  subgraph cluster_IBlockInputStream {
    graph[label="IBlockInputStream";fontsize=20;];
    read -> readImpl;
    IBlockInputStream -> PipelineExecutingBlockInputStream[label=derive];
    IBlockInputStream[
      shape="record";
      label="{{
        IBlockInputStream|
        the stream interface for reading\l
        data by blocks from the database\l
      }}";
    ];
    read[
      shape="record";
      label="{{
      read|
      Read next block\l
      if there no more blocks\l
      return an empty block\l
      }}";
    ];
    readPrefix -> readPrefixImpl;
    readPrefix[
      shape="record";
      label="{{
      readPrefix
      read something before\l 
      starting all data or after\l 
      the end of all data\l
      }}";
    ];
  }
}
