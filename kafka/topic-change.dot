digraph topic_change {
  node[shape=box;];
  newrank=true;
  rankdir=LR;
  subgraph cluster_zkClient {
    graph[label="zkClient";fontsize=20;style=rounded];
    getFullReplicaAssignmentForTopics[
      shape="record";
      label="{{
        getFullReplicaAssignmentForTopics|
        获取该topic的partion\l 
        副本的assignment信息\l
      }}";
    ];
    getFullReplicaAssignmentForTopics -> {
      GetDataRequest;
    }
    GetDataRequest[
      shape="record";
      label="{{
        GetDataRequest|
        获取TopicZnode下信息
      }}";
    ];

    getAllTopicsInCluster -> {
      GetChildrenRequest;
    }
    GetChildrenRequest[
      shape="record";
      label="{{
        GetChildrenRequest|
        获取TopicsZnode下所有children\l
      }}";
    ];
    registerZNodeChangeHandler;
    getChildren;
    setTopicAssignmentRaw;
    setTopicAssignmentRaw[
      shape="record";
      label="{{
        setTopicAssignmentRaw|
        更新zk中topic partition\l 
        的assignment
      }}";
    ];
    getReplicaAssignmentForTopics[
      shape="record";
      label="{{
        getReplicaAssignmentForTopics|
        从zk中获取topic的replica Assignment
      }}";
    ];
    getReplicaAssignmentForTopics -> {
      getFullReplicaAssignmentForTopics;
      GetDataRequest;
    }
  };
  subgraph cluster_controllerContext {
    graph[label="controllerContext";fontsize=20;style=rounded];
    partitionLeadershipInfo[
      fillcolor="#95e1d3";
      style=filled;
      shape="record";
      label="{{
        partitionLeadershipInfo
      }}";
    ];
    
    updateReplicaAssignmentForPartition[
      shape="record";
      label="{{
        updateReplicaAssignmentForPartition|
        更新partition replica 分配
        更新内存和zk
      }}";
    ];
    updatePartitionFullReplicaAssignment[
      shape="record";
      label="{{
        updatePartitionFullReplicaAssignment|
        更新controllerContext中缓存
      }}";
    ];
    updateReplicaAssignmentForPartition -> {
      partitionFullReplicaAssignmentForTopic;
      setTopicAssignmentRaw
    }
    partitionFullReplicaAssignmentForTopic -> partitionAssignments;
    allTopics[
      fillcolor="#95e1d3";
      style=filled;
      shape="record";
      label="{{
        allTopics
      }}";
    ];
    partitionAssignments[
      fillcolor="#95e1d3";
      style=filled;
      shape="record";
      label="{{
        partitionAssignments
      }}";
    ];
    updatePartitionFullReplicaAssignment[
      shape="record";
      label="{{
        updatePartitionFullReplicaAssignment|
        新增的topic刷新\l 
        assignment信息\l
      }}";
    ];

    updatePartitionFullReplicaAssignment -> {
      partitionAssignments;
    };
    removeTopic[
      shape="record";
      label="{{
        removeTopic\l|
        从assignments和leadership\l 
        中删掉该topic消息\l
      }}";
    ];
    removeTopic -> {
      partitionAssignments;
      partitionLeadershipInfo;
    }
  };
  subgraph cluster_partitionStateMachine {
    graph[label="partitionStateMachine";fontsize=20;style=rounded];
    pm_NewPartition[
      shape="record";
      label="{{
        handleStateChanges(NewPartition)\l|
        新建partition
      }}";
    ];
    pm_OnlinePartition[
      shape="record";
      label="{{
        handleStateChanges(OnlinePartition)\l|
        将paritition设置为在线
      }}";
    ];
  };

  subgraph cluster_ReplicaStateMachine {
    graph[label="ReplicaStateMachine";fontsize=20;style=rounded];
    rm_NewReplica[
      shape="record";
      label="{{
        handleStateChanges(NewReplica)
      }}";
    ];
    rm_OnlineReplica[
      shape="record";
      label="{{
        handleStateChanges(OnlineReplica)
      }}";
    ];
  };
  onNewPartitionCreation[
    shape="record";
    label="{{
      onNewPartitionCreation|
      创建新的partition
    }}";
  ];
  processTopicChange[
    shape="record";
    label="{{
      processTopicChange|
      比较allTopics和zk中的topic\l
      计算出删除和新增的topic\l
    }}";
  ];
  registerPartitionModificationsHandlers[
    shape="record";
    label="{{
      registerPartitionModificationsHandlers|
      给新增的topic注册\l 
      PartitionModification处理函数\l
    }}";
  ];

  processTopicChange -> {
    getAllTopicsInCluster;
    removeTopic;
    allTopics;
    registerPartitionModificationsHandlers;
    updatePartitionFullReplicaAssignment;
    onNewPartitionCreation;
    getFullReplicaAssignmentForTopics;
  }
  registerPartitionModificationsHandlers -> {
    registerZNodeChangeHandler;
    PartitionModificationsHandler;
  }
  onNewPartitionCreation -> {
    pm_OnlinePartition;
    pm_NewPartition;
    rm_NewReplica;
    rm_OnlineReplica;
  }
  processPartitionModifications[
    shape="record";
    label="{{
      processPartitionModifications|
      zk partition数据改变回调\l
    }}";
  ];
  PartitionModificationsHandler -> processPartitionModifications;
  processPartitionModifications -> {
    getReplicaAssignmentForTopics;
    isTopicQueuedUpForDeletion;
    restorePartitionReplicaAssignment;
    updateReplicaAssignmentForPartition;
    onNewPartitionCreation;
  }
  restorePartitionReplicaAssignment -> {
    getChildren;
  }
}
