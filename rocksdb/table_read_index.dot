digraph table_read_index {
  node[shape=box];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  subgraph cluster_TableReader {
    graph[label="BlockBasedTableReader";fontsize=20;];
    BlockBasedTable_Get -> {
      IndexBlockIter_Seek;
      DataBlockIter_SeekForGet;
      FilterBlockReader_KeyMayMatch;
    }
    FilterBlockReader_KeyMayMatch[
      shape="record"
      label="{{
        FilterBlockReader_KeyMayMatch|
        BloomFilter 快速\l 
        排查key不存在的case\l
      }}"
    ];
    FilterBlockReader_KeyMayMatch -> FilterBlock;
    FilterBlock[
      shape="record";
      fillcolor="#95e1d3"
      style=filled;
      label="{{
        FilterBlock|
        BloomFilter对应的bits
      }}"
    ];
    IndexBlockIter_Seek[
      shape="record"
      label="{{
        IndexBlockIter_Seek|
        从Table的IndexBlock中\l 
        找到key所在的data block\l
      }}"
    ];
    IndexBlock[
      shape="record";
      fillcolor="#95e1d3"
      style=filled;
      label="{{
        IndexBlock|
        每个data block对应\l 
        的index数据\l
      }}"
    ];
    IndexBlockIter_Seek -> IndexBlock;
    DataBlockIter_SeekForGet[
      shape="record"
      label="{{
        DataBlockIter_SeekForGet|
        定位到对应的restartPoint\l
        然后遍历查找\l
      }}"
    ];
    DataBlockIter_SeekForGet -> SeekToRestartPoint;

    SeekToRestartPoint[
      shape="record"
      label="{{
        SeekToRestartPoint|
        根据每个datablock的restarts数据\l
        二分查找，找到对应的restart_index\l
      }}"
    ];
    SeekToRestartPoint -> restarts;
    restarts[
      shape="record";
      fillcolor="#95e1d3"
      style=filled;
      label="{{
        restarts|
        Datablock中的restarts数据
      }}"
    ];
  }
  Version_Get -> Cache -> BlockBasedTable_Get[style=dashed]
  Cache[
    shape="record"
    label="{{
      Cache|
      中间加了各种LRU Cache\l
      TableCache\l 
      DataBlockCache\l
      KeyRowCache\l
    }}"
  ];

  subgraph cluster_Version {
    graph[label="Version";fontsize=20;];
    Version_Get[
      shape="record"
      label="{{
        Get|
        从Version中查找\l
        根据versionStorageInfo中信息\l
        首先定位到相应的FileMetaData\l
        然后调用相应的TableCache查找该key\l
      }}"
    ];
    VersionStorageInfo[
      fillcolor="#95e1d3"
      style=filled;
      shape=record;
      label="VersionStorageInfo\l|
        std::vector\<FileMetaData*\>* files_
      "
    ];

    FileMetaData[
      shape="record";
      fillcolor="#95e1d3"
      style=filled;
      label="{{
        FileMetaData|
          FileDescriptor fd;\l|
          InternalKey smallest;\l|
          InternalKey largest;\l|
          ...
      }}"
    ];
    VersionStorageInfo -> FileMetaData;
    Version_Get -> VersionStorageInfo;
  }
  subgraph cluster_SuperVersion {
    graph[label="SuperVersion";fontsize=20;];
    super_version_mem_Get[
      shape="record"
      label="{{
        mem_Get|
        1.从mem中查找key
      }}"
    ];
    super_version_imm_Get[
      shape="record"
      label="{{
        super_version_imm_Get|
        2.从ImmList中查找key
      }}"
    ];
    super_version_current_Get[
      shape="record"
      label="{{
        current_version_Get|
        3.从当前的version中查找key
      }}"
    ];
    super_version_mem_Get -> SuperVersion:mem;
    super_version_imm_Get -> SuperVersion:imm;
    super_version_current_Get -> {
      SuperVersion:current;
      Version_Get;
    }

    SuperVersion[
      shape="record"
      label="{{
        SuperVersion|
          ColumnFamilyData* cfd;\l|
          <mem> MemTable* mem;\l|
          <imm> MemTableListVersion* imm;\l|
          <current> Version* current;\l|
          MutableCFOptions mutable_cf_options;\l|
          uint64_t version_number;\l|
          WriteStallCondition write_stall_condition;\l|
          InstrumentedMutex* db_mutex;\l
      }}"
    ];
  }
  subgraph cluster_DBImpl {
    graph[label="DBImpl";fontsize=20;];
    GetImpl -> {
      super_version_mem_Get;
      super_version_imm_Get;
      super_version_current_Get;
    }
  }
}
