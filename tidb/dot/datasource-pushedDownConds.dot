#include "styles.h"

digraph pushedDownConds {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;

  subgraph cluster_AcessPath {
    graph[label="AccessPath";fontsize=20;style="rounded,dashed";color="slategrey"]
    TableFilters[style_var];
    Ranges[style_var];
    IndexFilters[style_var];
  }
  findBestTask[
    shape="record";
    label="{{
      findBestTask|
      获取最优的物理查询计划\l
    }}"];
  convertToTableScan[
    shape="record";
    label="{{
      convertToTableScan|
      扫表\l
    }}"];
  convertToIndexScan[
    shape="record";
    label="{{
      convertToIndexScan|
      扫索引\l
    }}"];
  convertToIndexMergeScan[
    shape="record";
    label="{{
      convertToIndexMergeScan|
      先走索引,查到rowID\l 
      然后在扫表\l
      double read\l
    }}"];

  constructDistExec[style_func;label="{{
    constructDistExec|
    DistSQL层构造发往TiKV请求
  }}"]

  constructDistExec -> {
    PhysicalSelection_ToPB;
    PhysicalTableScan_ToPB;
    PhysicalIndexScan_ToPB;
  }[color="#b83b5e"];

  PhysicalTableScan_ToPB -> {
    TableRangesToKVRanges;
    BuildTableScanFromInfos;
  }
  TableRangesToKVRanges[
    shape="record";
    label="{{
      TableRangesToKVRanges|
      将range信息中加上tid
    }}"];

  BuildTableScanFromInfos -> tipb_TableScan;

  subgraph cluster_tipb {
    graph[label="tipb";fontsize=20;style="rounded,dashed";color="slategrey"]
    tipb_TableScan[style_struct;
      label="{{
        tipb.TableScan|
        TableID int64\l|
        Columns          []*ColumnInfo \l|
        Desc             bool      \l|
        NextReadEngine   EngineType\l|
        <Ranges>Ranges           []KeyRange  \l|
        PrimaryColumnIds []int64\l
        }}"];

    tipb_Selection[style_struct;
      label="{{
        tipb.Selection|
          <Conditions> Conditions       []*Expr\l|
          RpnConditions    []*RpnExpr\l|
          <Child> Child            *Executor\l
      }}"];
    tipb_IndexScan[style_struct;
      label="{{
        tipb.IndexScan|
          TableId          int64\l|
          IndexId          int64\l|     
          Columns          []*ColumnInfo\l|
          Desc             bool\l|
          Unique           *bool\l|
          PrimaryColumnIds []int64\l
      }}"];

      tipb_Selection:Child -> {
        tipb_TableScan;
        tipb_IndexScan;
      }[style_edge_data];
  }

  subgraph cluster_PhysicalSelection {
    graph[label="PhysicalSelection";fontsize=20;style="rounded,dashed";color="slategrey"]
    PhysicalSelection[style_struct;
      label="{{
        PhysicalSelection|
          Conditions []expression.Expression
      }}"];
    PhysicalSelection -> PhysicalSelection_ToPB;
    PhysicalSelection_ToPB -> {
      ExpressionsToPBList;
      tipb_Selection;
    }
    PhysicalSelection_ToPB[
      shape="record";
      label="{{
        ToPB
      }}"];
  }

  convertToTableScan -> addPushedDownSelection;
  subgraph cluster_PhysicalTableScan {
    graph[label="PhysicalTableScan";fontsize=20;style="rounded,dashed";color="slategrey"]
    addPushedDownSelection -> {
      PhysicalSelection;
    };
    PhysicalTableScan_ToPB[
      shape="record";
      label="{{
        ToPB
      }}"];
    PhysicalTableScan[style_struct;label="{{
        PhysicalTableScan|
        <Ranges> Ranges []*ranger.Range\l|
	      AccessCondition []expression.Expression\l|
        filterCondition []expression.Expression\l
      }}"];
  }

  convertToIndexScan -> PhysicalIndexScan_addPushedDownSelection;
  subgraph cluster_PhysicalIndexScan {
    graph[label="PhysicalIndexScan";fontsize=20;style="rounded,dashed";color="slategrey"]
    PhysicalIndexScan_addPushedDownSelection[
      shape="record";
      label="{{
        addPushedDownSelection
      }}"];
    PhysicalIndexScan[style_struct;label="{{
        PhysicalIndexScan|
          AccessCondition []expression.Expression\l|
          <Ranges> Ranges     []*ranger.Range\l
      }}"];
    PhysicalIndexScan -> PhysicalIndexScan_ToPB;
    PhysicalIndexScan_ToPB[
      shape="record";
      label="{{
        ToPB
      }}"];
    PhysicalIndexScan_ToPB -> tipb_IndexScan;
    PhysicalIndexScan_addPushedDownSelection -> PhysicalSelection;
  }
  subgraph cluster_DataSource {
    graph[label="DataSource";fontsize=20;style="rounded,dashed";color="slategrey"]
    findBestTask -> {
      convertToTableScan;
      convertToIndexScan;
      convertToIndexMergeScan;
    }
    convertToIndexMergeScan -> {
      convertToPartialIndexScan;
      convertToPartialTableScan;
      buildIndexMergeTableScan;
    }
    convertToPartialIndexScan -> PhysicalSelection;
    convertToPartialTableScan -> PhysicalSelection;
  }

  edge[style=dashed;color=darkblue]
  ExpressionsToPBList -> tipb_Selection;
  PhysicalTableScan -> PhysicalTableScan_ToPB;
  IndexFilters -> PhysicalIndexScan_addPushedDownSelection;
  IndexFilters -> convertToPartialIndexScan;

  edge[style=dashed;color=darkgreen]
  Ranges -> PhysicalTableScan:Ranges;
  Ranges -> PhysicalIndexScan:Ranges;
  Ranges -> TableRangesToKVRanges  -> tipb_TableScan:Ranges;

  edge[style=dashed;color=darkred];
  TableFilters -> buildIndexMergeTableScan -> PhysicalSelection;
  TableFilters -> convertToPartialTableScan;
  TableFilters -> splitIndexFilterConditions -> IndexFilters;
}
