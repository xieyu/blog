digraph hash_join {
  node[shape=box];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  HashJoinExec -> {
    Open;
    Next;
    Close;
  }
  joinResultCh[
    shape="record";
    fillcolor="#95e1d3"
    style=filled;
    label="{{
      joinResultCh|
      channel
    }}";
  ];

  Next -> {
    fetchAndProbeHashTable;
    fetchAndBuildHashTable;
  }
  Next -> joinResultCh[label="recv";color=blue];
  Next[
    shape="record";
    label="{{
      Next|
      从joinResultCh chanel\l  
      中取结果\l
    }}";
  ];
  fetchAndBuildHashTable[
    shape="record";
    fillcolor="#f38181";
    style=filled;
    label="{{
      fetchAndBuildHashTable|
      goroutine
    }}";
  ];
  fetchBuildSideRows[
    shape="record";
    fillcolor="#f38181";
    style=filled;
    label="{{
      fetchBuildSideRows\l|
      goroutine\l|
      fetches all rows from\l 
      build side executor\l
      and append them to \l 
      e.buildSideResult\l
    }}";
  ];
  buildSideResultCh[
    shape="record";
    fillcolor="#95e1d3"
    style=filled;
    label="{{
      buildSideResultCh
    }}";
  ];
  fetchBuildSideRows -> {
    buildSideExec_Next;
  }
  buildHashTableForList[
    shape="record";
    label="{{
      buildHashTableForList|
      给buildSide所有rows\l
      创建hash表\l
    }}"];
  rowContainer[
    shape=record;
    style=filled;
    fillcolor="#95e1d3"
    label="{{
      rowContainer|
      hashRowContainer
      在runJoinWorker中会用来\l
      获取和probeKey 匹配的buildSide\l
      Rows\l
    }}"
  ];
  rowContainer -> runJoinWorker[style=dashed];
  buildSideResultCh -> buildHashTableForList -> rowContainer;
  fetchBuildSideRows -> buildSideResultCh[color=red;label="send"];

  fetchAndBuildHashTable -> {
    fetchBuildSideRows;
    buildHashTableForList;
  }

  fetchAndProbeHashTable -> {
    runJoinWorker;
    fetchProbeSideChunks;
  }[color="#b83b5e"];

  runJoinWorker[
    shape="record";
    fillcolor="#f38181";
    style=filled;
    label="{{
      runJoinWorker|
      单独go routine 执行JoinWorker\l|
      从probeResultChns取probe数据\l
      将Join result的结果放到jionResultCh中\l
      等Next去取|
      可以并行跑多个joinWorker
    }}";
  ];
  runJoinWorker -> {
    joinResultCh;
  }[color=red;label="send"];

  fetchProbeSideChunks[
    shape="record";
    fillcolor="#f38181";
    style=filled;
    label="{{
      fetchProbeSideChunks|
      goroutine\l|
      get chunks from fetches chunks\l 
      from the big table in a \l 
      background goroutine\l|
      and sends the chunks to \l 
      multiple channels which\l 
      will be read by multiple join workers.\l
    }}";
  ];
  fetchProbeSideChunks -> {
    probeSideExec_Next;
    probeResultChs;
    wait4BuildSide;
  }
  wait4BuildSide[
    shape="record";
    label="{{
      wait4BuildSide|
      等待hashtable build结束
    }}";
  ];
  buildFinished[
    shape="record";
    fillcolor="#95e1d3"
    style=filled;
    label="{{
      buildFinished|
      channel
    }}";
  ];
  wait4BuildSide -> buildFinished[label="recv",color=blue];
  fetchAndBuildHashTable -> buildFinished[label="send";color=red];
  probeResultChs[
    shape="record";
    fillcolor="#95e1d3"
    style=filled;
    label="{{
      probeResultChs|
      probeResultChs[workerID]
    }}";
  ];
  probeResultChs -> runJoinWorker;
  Close -> {
    closeCh;
    close_probeChkResourceCh;
  }
  buildSideExec_Next[
    shape="record";
    label="{{
    buildSideExec_Next|
    从buildSideExec child中取数据
    }}";
  ];
  probeSideExec_Next[
    shape="record";
    label="{{
      probeSideExec_Next|
      从probeSideExec child中取数据
    }}";
  ];

}
