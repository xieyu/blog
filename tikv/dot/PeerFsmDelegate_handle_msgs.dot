#include "styles.h"
digraph tikv_rawnode_proposal {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;

  subgraph cluster_RawNode {
    graph[label="RawNode";fontsize=20;style="rounded,dashed";color="slategrey"]
    RawNode_propose[style_func;label="{{
      propose
    }}"]
    RawNode_tick[style_func;label="{{
      tick
    }}"]
    RawNode_step[style_func;label="{{
      step|
      处理其他节点发过\l 
      来的raft消息\l
    }}"]
    advance_apply_to;
  }
  subgraph cluster_Peer {
    graph[label="Peer";fontsize=20;style="rounded,dashed";color="slategrey"]
    Peer_step[style_func;label="{{
      step
    }}"]
    Peer_propose[style_func;label="{{
      propose
    }}"]
    Peer_post_apply[style_func;label="{{
      post_apply
    }}"]
    Peer_step -> RawNode_step;
    Peer_propose -> {
      read_index;
      propose_normal;
      propose_transfer_leader;
    }
    propose_normal -> {
      //pre_propose;
      //next_proposal_index;
      RawNode_propose;
    }
    Peer_post_apply -> {
      advance_apply_to;
    }
    
  }
  subgraph cluster_PeerFsmDelegate {
    graph[label="PeerFsmDelegate";fontsize=20;style="rounded,dashed";color="slategrey"]

    propose_batch_raft_command -> {
      propose_raft_command;
    }
    propose_raft_command -> {
      Peer_propose;
    }
    PeerFsmDelegate_handle_msgs[style_func;label="{{
      handle_msgs|
      处理PeerMsg::RaftCommand\l
      PeerMsg::ApplyRes\l
      PeerMsg::SingificantMsg\l
      PeerMsg::CasualMessage\l
      PeerMsg::Start\l
    }}"]

    on_casual_msg[style_func;label="{{
      on_casual_msg|
      处理PeerMsg::CasualMessage\l
    }}"]
    on_significant_msg[style_func;label="{{
      on_significant_msg|
      处理SignificantMsg\l
    }}"]
    on_apply_res[style_func;label="{{
      on_apply_res|
      处理PeerMsg::ApplyRes\l
      ready的处理结果
    }}"]
    start[style_func;label="{{
      start|
      处理PeerMsg::Start消息\l
    }}"]
    {
      rank=same;
      on_casual_msg;
      on_apply_res;
      on_significant_msg;
      start;
    }
    PeerFsmDelegate_handle_msgs -> {
      on_casual_msg;
      on_apply_res;
      start;
      on_significant_msg;
      on_raft_gc_log_tick;
      propose_batch_raft_command;
      propose_raft_command;
      on_tick;
      on_raft_message;
    }
    on_tick -> on_raft_base_tick -> RawNode_tick;

    on_casual_msg -> {
      on_hash_computed;
      on_raft_gc_log_tick;
    }
    on_hash_computed -> propose_raft_command;
    on_raft_gc_log_tick -> propose_raft_command;
    on_check_merge -> propose_raft_command;
    on_significant_msg -> {
      on_capture_change;
      on_leader_callback;
    } -> propose_raft_command;
    start -> propose_raft_command;
    on_apply_res -> on_ready_result -> on_ready_prepare_merge -> on_check_merge;
    on_apply_res -> Peer_post_apply;
    on_raft_message[style_func;label="{{
      on_raft_msg|
      处理raft消息\l
    }}"]

    on_raft_message -> {
      Peer_step;
    }
  }

}
