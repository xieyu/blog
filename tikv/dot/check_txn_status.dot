#include "styles.h"
digraph dig {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;

  CheckTxnStatus__process_write -> {
    ConcurrencyManager__update_max_ts;
    SnapshotReader__new;
    SnapshotReader__load_lock;
    check_txn_status_lock_exists;
    check_txn_status_missing_lock;
    ReleasedLocks__new;
    ReleasedLocks__push;
    ReleasedLocks__wakeup;
    TxnStatus__TtlExpire;
  }
  CheckTxnStatus__primary_key -> SnapshotReader__load_lock[style_edge_data]

  SnapshotReader__new -> SnapshotReader__load_lock
  -> {
    check_txn_status_lock_exists;
    check_txn_status_missing_lock;
    mismatch_lock;
  }[style_edge_data];

  ReleasedLocks__new -> ReleasedLocks__push -> ReleasedLocks__wakeup[style_edge_data];
  TxnStatus__TtlExpire -> ReleasedLocks__wakeup[style_edge_data];

  check_txn_status_lock_exists -> {
    MvccTxn__unlock_key;
    rollback_lock;
    Lock__min_commit_ts;
    MvccTxn__put_lock;
    Lock__expired;
    TxnStatus__Uncommitted;
  }
  {
    CheckTxnStatus__current_ts;
    CheckTxnStatus__caller_start_ts;
  }-> Lock__min_commit_ts[style_edge_data]
  CheckTxnStatus__current_ts -> Lock__expired;

  CheckTxnStatus__caller_start_ts -> ConcurrencyManager__update_max_ts[style_edge_data];

  Lock__min_commit_ts -> MvccTxn__put_lock[style_edge_data];
  Lock__expired -> {
    MvccTxn__unlock_key;
    rollback_lock
  }[style_edge_data];

  rollback_lock -> TxnStatus__TtlExpire[style_edge_data]
  rollback_lock -> ReleasedLocks__push[style_edge_data]

  MvccTxn__unlock_key -> TxnStatus__PessimisticRollback
  MvccTxn__put_lock -> TxnStatus__Uncommitted

  mismatch_lock -> MvccTxn__mark_rollback_on_mismatching_lock[style_edge_data];
  MvccTxn__mark_rollback_on_mismatching_lock -> MvccTxn__put_lock2;

  //rank
  {
    rank=same;
    CheckTxnStatus__current_ts;
    CheckTxnStatus__primary_key;
    CheckTxnStatus__caller_start_ts;
  }
  {
    rank=same;
    mismatch_lock;
    Lock__expired;
  }
  {
      rank=same;
      MvccTxn__put_lock;
      MvccTxn__put_lock2;
      MvccTxn__unlock_key;
  }

  {
     rank=same;
     TxnStatus__Uncommitted;
     TxnStatus__PessimisticRollback;
     TxnStatus__TtlExpire;
  }

  //detail
  CheckTxnStatus__process_write[style_func;label="{{
    CheckTxnStatus\l
    process_write\l|
    处理CheckTxnStatu命令\l|
    primary_key: Key,\l|
    lock_ts: TimeStamp,\l|
    caller_start_ts: TimeStamp,\l|
    current_ts: TimeStamp,\l|
    rollback_if_not_exist: bool,\l|
    force_sync_commit: bool,\l|
    resolving_pessimistic_lock: bool,\l
  }}"]
  CheckTxnStatus__primary_key[style_var;label="{{
    CheckTxnStatus\l
    primary_key\l
    请求中的primary_key\l
  }}"]
  CheckTxnStatus__caller_start_ts[style_var;label="{{
    CheckTxnStatus\l
    caller_start_ts\l
    会用于更新max_ts\l
    和min_commit_ts\l
  }}"]

  CheckTxnStatus__current_ts[style_var;label="{{
    CheckTxnStatus\l
    current_ts\l
    当前时间戳\l
    用来判断是否过期\l
  }}"]

  Lock__min_commit_ts[style_orange;label="{{
    update lock.min_commit_ts\l
    txn还持有该lock\l
    lock没有过期\l|
    根据caller_start_ts\l
    current_ts\l
    更新lock.min_commit_ts\l
  }}"]

  Lock__expired[style_orange;label="{{
    Lock__expired|
    txn还持有该lock\l
    但lock已过期\l|
    lock.ts.physical() \l
    + lock.ttl \< \l
    current_ts.physical\l|
    lock过期了，需要清理掉\l
  }}"]

  mismatch_lock[style_orange;label="{{
    mismatch_lock\l
    lock.ts != lock_ts\l
    lock已经被其他事务\l
    持有了\l
  }}"]

  MvccTxn__put_lock[style_blue1;label="{{
    MvccTxn\l
    put_lock\l
    写入更新后的\l|
    后的Lock\l
  }}"]
  MvccTxn__put_lock2[style_blue1;label="{{
    MvccTxn\l
    put_lock\l|
    更新其他事务lock的\l
    rollback_ts\l
  }}"]

  MvccTxn__unlock_key[style_blue1;label="{{
    MvccTxn\l
    UnlockKey\l|
    如果是悲观事务\l|
    且请求要求\l
    resolving_pessimistic_lock\l
  }}"]
  MvccTxn__mark_rollback_on_mismatching_lock[style_func;label="{{
    MvccTxn\l
    mark_rollback_on_mismatching_lock\l|
    将start_ts加入到lock\l
    的rollback_ts数组中\l
  }}"]

  rollback_lock[style_blue1;label="{{
    rollback_lock\l|
    清理掉primary key\l
    lock primary ttl已超时\l
  }}"]

  SnapshotReader__new[style_func;label="{{
    SnapshotReader\l
    new\l
  }}"]

  SnapshotReader__load_lock[style_func;label="{{
    SnapshotReader\l
    load_lock\l|
    读取lock\l
  }}"]

  check_txn_status_lock_exists[style_blue1;label="{{
    check_txn_status_lock_exists\l|
    如果Lock存在\l
    且lock.ts是\l
    传入的lock_ts\l|
    check whether there's \l
    an overlapped write record\l
    and tehn perform rollback\l
  }}"]

  check_txn_status_missing_lock[style_blue1;label="{{
    check_txn_status_missing_lock\l|
    如果Lock不存在\l
    或者lock.ts和lock_ts不match\l|
    1. lock可能被提交了\l
    2. lock被rollback了\l
  }}"]

  ConcurrencyManager__update_max_ts[style_func;label="{{
    ConcurrencyManager\l|
    update_max_ts\l
    如果caller_ts比max_ts大\l
    更新max_ts\l
  }}"]

  ReleasedLocks__new[style_func;label="{{
    ReleasedLocks\l
    new\l
  }}"]
  ReleasedLocks__push[style_func;label="{{
    ReleasedLocks\l
    push\l
  }}"]
  ReleasedLocks__wakeup[style_func;label="{{
    ReleasedLocks\l
    wakeup\l
  }}"]

  TxnStatus__TtlExpire[style_green1;label="{{
    TxnStatus\l
    TtlExpire\l|
    just rollback\l
    due to expiration\l|
    由于ttl过期\l
    在本次check时被rolback了\l
  }}"]

  TxnStatus__Uncommitted[style_green1;label="{{
   TxnStatus\l
   Uncommitted\l|
   事务还没提交\l
  }}"]
  TxnStatus__PessimisticRollback[style_green1;label="{{
    TxnStatus\l
    PessimisticRollback\l|
    the primary key is \l
    pessimistically\l
    rolled back\l|
    在本次check中被rollblack了\l
  }}"]



}
