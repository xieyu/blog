#include "styles.h"
digraph LocalReader_read{
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  LocalReader__read[style_func;label="{{
    LocalReader\l
    read\l|
    1. check leader lease\l|
    2. 对于同一个RPC request\
    使用同一个snapshot\l
  }}"]

  LocalReader__read -> {
     LocalReader__propose_raft_command;
  }
  LocalReader__propose_raft_command[style_func;label="{{
    LocalReader\l
    propose_raft_command\l|
    提交raft read cmd\l
  }}"]
  LocalReader__propose_raft_command -> {
     LocalReader__pre_propose_raft_command;
     LocalReader__redirect;
     ReadDelegate__is_in_leader_lease;
     LocalReader__execute;
     Callback__invoke_read;
     ThreadReadId;
  }
  ReadDelegate__is_in_leader_lease[style_func;label="{{
    ReadDelegate__is_in_leader_lease|
    检查是否还在leader\l
    lease内\l
  }}"]
  LocalReader__pre_propose_raft_command ->{
     LocalReader__get_delegate;
     Inspector__inspect;
     Inspector__has_applied_to_current_term;
     RequestHeader__get_read_quorum;
  }
  Inspector__has_applied_to_current_term[style_func;label="{{
    Inspector\l
    has_applied_to_current_term\l|
    如果applied index term\l
    和current raft term不一致\l
    leader transfer must happened\l
    if read locally we may read old value\l
  }}"]
  RequestHeader__get_read_quorum[style_func;label="{{
    RequestHeader\l
    get_read_quorum\l|
    请求头中明确要求\l
    走一次ReadIndex\l
  }}"]
  Inspector__inspect_lease[style_func;label="{{
    Inspector\l
    inspect_lease\l|
    检查leader lease是否已过期\l
  }}"]

  Inspector__inspect -> {
    Inspector__inspect_lease;
    Inspector__has_applied_to_current_term;
  }
  {
    RequestHeader__get_read_quorum;
    Inspector__has_applied_to_current_term;
    Inspector__inspect_lease
  } -> LocalReader__redirect[style_edge_data];

  LocalReader__get_delegate[style_func;label="{{
    LocalReader\l
    get_delegate\l|
    如果cache中没有\l
    或者read delegate\l
    的track_ver发生了变化\l
    则去storeMeta的readers\l
    获取最新的ReadDelegate\l
  }}"]
  LocalReader__get_delegate -> {
    StoreMeta__readers;
    ReadDelegate__Tracker__any_new;
  }
  ReadDelegate__Tracker__any_new[style_func;label="{{
    ReadDelegate__Tracker__any_new|
    检查版本是否落后于\l
    StoreMeta中的\l
    ReadDelegate\l
  }}"]
  StoreMeta__readers[style_var;label="{{
    StoreMeta\l
    readers\l|
    pub readers: HashMap\<u64,\l
    ReadDelegate\>,\l|
    如果LRU cache中没有\l
    加锁后访问store_meta\l
    获取对应的readers\l
  }}"]
  LocalReader__execute -> Callback__invoke_read[style_edge_data];
  Callback__invoke_read[style_func;label="{{
    Callback\l
    invoke_read\l|
    调用callback的invoke_read\l
  }}"]

  //ReadDelegate__is_in_leader_lease -> {
  //  ReadDelegate__leader_lease;
  //  ReadDelegate__term;
  //  RemoteLease__term;
  //  RemoteLease__inspect;
  //}

  //RemoteLease__inspect -> {
  //  RemoteLease__expired_time;
  //}
  //RemoteLease__renew -> RemoteLease__expired_time;
  LocalReader__execute -> {
    LocalReader__get_value;
    LocalReader__get_snapshot;
  }
  ReadDelegate__is_in_leader_lease -> {
   LocalReader__redirect;
   LocalReader__execute;
  }[style_edge_data];
  LocalReader__execute[style_blue1;label="{{
    LocalReader\l
    execute\l|
    还在leader lease内\l
    直接读\l
  }}"]


  LocalReader__redirect[style_blue1;label="{{
    LocalReader\l
    redirect\l|
    不再leader lease内了\l
    将RaftCommand\l
    发送给raftstore\l
  }}"]
  LocalReader__pre_propose_raft_command[style_func;label="{{
    LocalReader\l
    pre_propose_raft_command\l|
    准备ReadDelegate\l
  }}"]
  ThreadReadId[style_func;label="{{
    ThreadReadId|
    judge read requests \l
    from the same GRPC stream\l
  }}"]

  LocalReader__get_delegate -> ReadDelegate__is_in_leader_lease[style_edge_data];

}
