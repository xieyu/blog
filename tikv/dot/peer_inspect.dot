#include "styles.h"
digraph peer_inspect{
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  subgraph cluster_RaftRs{
    graph[label="raft-rs";fontsize=20;style="rounded,dashed";color="slategrey"]
    in_lease;
    in_lease[style_func;label="{{in_lease|
        self.state == StateRole::Leader\l 
        && self.check_quorum\l
    }}"]
  }
  subgraph cluster_Lease {
    graph[label="Lease";fontsize=20;style="rounded,dashed";color="slategrey"]
    bound[style_var;label="{{bound|bound = self.next_expired_time()}}"]
    Lease_inspect[style_func;label="{{inspect}}"]
    Lease_inspect ->{
      bound;
      monotonic_raw_now;
    };
  }

  subgraph cluster_Peer {
    graph[label="Peer";fontsize=20;style="rounded,dashed";color="slategrey"]
    not_has_applied_to_current_term[style_func;label="{{
      !self.has_applied_to_current_term()|
        If applied index's term is differ\l 
        from current raft's term, leader transfer\l
        must happened, if read locally, \l 
        we may read old value.\l|
        self.get_store().applied_index_term() == self.term
    }}"]
    inspect_lease[style_func;label="{{inspect_lease|
    调用raft-rs检查是否在in_lease\l
    检查Lease是否在bound时间范围内\l
    }}"]
    propose -> {
      inspect;
    }
    inspect -> {
      inspect_lease;
      not_has_applied_to_current_term;
    }
    not_has_applied_to_current_term -> RequestPolicy_ReadIndex;
    inspect_lease -> {
      LeaseState_Valid;
      LeaseState_Expired;
      LeaseState_Suspect
    }[style_edge_data];

    inspect_lease -> {
      in_lease;
      Lease_inspect;
    }
    LeaseState_Valid -> RequestPolicy_ReadLocal;
    {
      LeaseState_Expired;
      LeaseState_Suspect;
    } -> RequestPolicy_ReadIndex;
      
  }
}
