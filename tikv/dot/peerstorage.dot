#include "styles.h"
digraph PeerStorage {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  PeerStorage[style_func;label="{{
    PeerStorage|
    peer_id: u64,\l|
    region: metapb::Region,\l|
    raft_state: RaftLocalState,\l|
    apply_state: RaftApplyState,\l
    ...\l
  }}"]

  RaftState[style_blue1;label="{{
    RaftState|
    pub hard_state: HardState,\l|
    pub conf_state: ConfState,\l
  }}"]

  RaftLocalState[style_func;label="{{
    RaftLocalState|
    eraftpb.HardState hard_state = 1;\l|
    <last_index> uint64 last_index = 2;\l
  }}"]

  RaftLocalState -> {
    HardState;
  }

  HardState[style_func;label="{{
    HardState|
    uint64 term = 1;\l|
    uint64 vote = 2;\l|
    uint64 commit = 3;\l
  }}"]
  RaftApplyState[style_func;label="{{
    RaftApplyState|
    uint64 applied_index = 1;\l|
    uint64 last_commit_index = 3;\l|
    uint64 commit_index = 4;\l|
    uint64 commit_term = 5;\l
    RaftTruncatedState truncated_state = 2;\l
  }}"]
  RaftTruncatedState[style_func;label="{{
    RaftTruncatedState|
    uint64 index = 1;\l|
    uint64 term = 2;\l
  }}"]
  RaftApplyState -> RaftTruncatedState;


  PeerStorage -> {
    RaftLocalState;
    RaftApplyState;
    Region;
  }

  Region[style_func;label="{{
    Region|
    uint64 id = 1;\l|
    bytes start_key = 2;\l|
    bytes end_key = 3;\l|
    RegionEpoch region_epoch = 4;\l|
    repeated Peer peers = 5;\l|
    encryptionpb.EncryptionMeta encryption_meta = 6;\l
  }}"]
  RegionEpoch[style_func;label="{{
    RegionEpoch|
    uint64 conf_ver = 1;\l|
    uint64 version = 2;\l
  }}"]
  Peer[style_func;label="{{
    Peer|
    uint64 id = 1;\l|
    uint64 store_id = 2;\l|
    PeerRole role = 3;\l
  }}"]

  Region -> {
    Peer;
    RegionEpoch;
  }
  ConfState[style_func;label="{{
    ConfState|
    repeated uint64 voters = 1;\l|
    repeated uint64 learners = 2;\l|
    repeated uint64 voters_outgoing = 3;\l|
    repeated uint64 learners_next = 4;\l|
    bool auto_leave = 5;\l
  }}"]
  RaftState -> ConfState;
  {Peer;HardState} -> Storage_initial_state -> RaftState[style_edge_data];
  RaftTruncatedState -> Storage_first_index[style_edge_data];
  RaftLocalState:last_index -> Storage_last_index;

  {
    rank=same;
    Storage_first_index;
    Storage_initial_state;
    Storage_last_index;
  }
  Storage_initial_state[style_struct;label="{{
    Storage::initial_state\l|
    is called when Raft is initialized\l
  }}"]
  Storage_first_index[style_struct;label="{{
    Storage::first_index\l|
    returns the index of the first log entry\l
    that is possible available via entries\l
    always equal to truncated index plus 1\l
  }}"]
  Storage_last_index[style_struct;label="{{
    Storage::last_index|
    The index of the last entry\l
    replicated in the `Storage`.\l
  }}"]
}
