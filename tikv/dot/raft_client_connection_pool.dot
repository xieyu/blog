#include "styles.h"
digraph raft_client_connection_pool {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;
  RaftClient[style_func;label="{{
    RaftClient|
    管理connection\l
    发消息时，先调用send，最后flush\l|
    pool: Arc\<Mutex\<ConnectionPool\>\>,\l|
    cache: LruCache\<(u64, usize), CachedQueue\>,\l|
    need_flush: Vec\<(u64, usize)\>,\l|
    full_stores: Vec\<(u64, usize)\>,\l|
    future_pool: Arc\<ThreadPool\<TaskCell\>\>,\l|
    builder: ConnectionBuilder\<S, R\>,\l
  }}"]

  RaftClient -> {
     ConnectionPool;
     LruCache;
     CachedQueue;
  }

  ConnectionPool[style_func;label="{{
    ConnectionPool|
    管理连接池\l
    key为store_id, conn_id\l|
    connections: HashMap\<(u64, usize), Arc\<Queue\>\>,\l|
    tombstone_stores: HashSet\<u64\>,\l
  }}"]

  ConnectionPool -> {
     Queue;
  }
  CachedQueue -> Queue;

  CachedQueue[style_blue1;label="{{
    CachedQueue|
    queue: Arc\<Queue\>,\l|
    dirty: bool,\l|
    full: bool,\l|
    如果dirty/full会\l
    调用queue的notify\l|
  }}"]

  LruCache[style_func;label="{{
    LruCache|
    map: HashMap\<K, ValueEntry\<K, V\>\>,\l|
    trace: Trace\<K\>,\l|
    capacity: usize,\l|
    key为store_id, conn_id\l
    value为cached queue\l|
    在发消息时先从cache中获取\l
    store_id, conn_id对应的queue\l
    成功话，就把消息push到queue中\l|
  }}"]
  LruCache -> CachedQueue;

  Queue[style_blue1;label="{{
    Queue|
    buf: ArrayQueue\<RaftMessage\>,\l|
    connected: AtomicBool,\l|
    waker: Mutex\<Option\<Waker\>\>,\l|
    store_id, conn_id的\l
    消息发送队列\l|
    消息先放入buf\l
    等队列满或者flush时\l
    notify waker pop处理消息\l|
  }}"]

  Queue -> {
     RaftMessage;
     Waker;
  }
  Waker[style_func;label="{{
    Waker|
    a Waker is a handler\l
    for waking up \l
    a task by notifying\l
    its executor\l
  }}"]

  StreamBackEnd[style_func;label="{{
    StreamBackEnd|
    store_id: u64,\l|
    queue: Arc\<Queue\>,\l|
    <builder> builder: ConnectionBuilder\<S, R\>,\l|
    watches lifetime of a conection\l
    and handle reconnecting\l
  }}"]
  StreamBackEnd -> Queue;
}
