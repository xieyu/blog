#include "styles.h"
digraph sched_txn_command {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;

  subgraph cluster_Latches {
    graph[label="Latches";fontsize=20;style="rounded,dashed";color="slategrey"]
    acquire;
  }

  subgraph cluster_Scheduler {
    graph[label="Scheduler";fontsize=20;style="rounded,dashed";color="slategrey"]
    subgraph cluster_SchedulerInner {
      graph[label="SchedulerInner";fontsize=20;style="rounded,dashed";color="slategrey"]
      too_busy;
      get_task_slot;
      new_task_context;
      gen_id -> id_alloc;
      gen_id[style_func;label="{{
        gen_id|
        let id = self.id_alloc.\l 
        fetch_add(1, Ordering::Relaxed);\l
      }}"]

      id_alloc[style_var;label="{{
      id_alloc|
        id_alloc: CachePadded\<AtomicU64\>,\l
      }}"]
      gen_id -> get_task_slot[style_edge_data];
      get_task_slot -> task_slots;
      task_slots[style_var;label="{{
        task_slots|
          Vec\<CachePadded\<\l 
          Mutex\<HashMap\<u64, TaskContext\>\>\>\>,\l
      }}"]
      {new_task_context;get_task_slot} -> tctx[style_edge_data];
      tctx -> acquire[style_edge_data];
      process_by_worker[style_func;label="{{
        process_by_worker|
        Delivers a command \l 
        to worker thread for processing\l|
        在线程池执行cmd\l
        cmd会使用snapshot\l
      }}"]
    }

    run_cmd -> {
      need_flow_control;
      schedule_command;
      too_busy;
    }

    schedule_command -> {
      get_task_slot;
      gen_id;
      new_task_context;
      acquire;
      on_schedule;
      execute;
    }
    acquire -> {
      execute;
      on_schedule;
    }[style_edge_data];

    execute -> {
      with_tls_engine;
      async_snapshot;
    }
    async_snapshot[style_func;label="{{
      async_snapshot|
      异步获取snapshot\l
      然后回调\l
    }}"]
    async_snapshot -> cb[style_edge_data];
    cb -> process_by_worker;
  }
  subgraph cluster_Storage {
    graph[label="Storage";fontsize=20;style="rounded,dashed";color="slategrey"]
    sched_txn_command -> {
      check_key_size;
      run_cmd;
    }
  }
}
