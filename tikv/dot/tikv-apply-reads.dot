#include "styles.h"
digraph apply_reads {
  node[shape=box;style="rounded";color="#1c2123";fontcolor="#2f3638"];
  edge[color=gray40];
  newrank=true;
  rankdir=LR;

  subgraph cluster_Peer {
    graph[label="Peer";fontsize=20;style="rounded,dashed";color="slategrey"]
    subgraph cluster_leader {
      graph[label="leader";fontsize=20;style="rounded,dashed";color="slategrey"]
      ready_to_handle_read;
      advance_leader_reads;
    }
    subgraph cluster_not_leader {
      graph[label="not_leader";fontsize=20;style="rounded,dashed";color="slategrey"]
      advance_replica_reads;
      post_pending_read_index_on_replica;
    }

    advance_replica_reads[style_func;label="{{
      advance_replica_reads|
      update the read index\l 
      of the requests that \l 
      before the specified id.\l|
      遍历ready.states\l
      for (uuid, locked, index) in states\l|
      设置read_index\l
      ...
    }}"];
    contexts_remove[style_func;label="{{
      contexts_remove|
      从hashmap中Pop出uuid对应的index
    }}"]
    advance_replica_reads -> {
      contexts_remove;
    };
    addition_request_is_some -> pending_reads_push_front[style_edge_data];

    advance_leader_reads[style_func;label="{{advance_leader_reads|
    设置read_index
    }}"]
    post_pending_read_index_on_replica[style_func;label="{{post_pending_read_index_on_replica|
    Responses to the ready read index\l 
    request on the replica, the\l
    replica is not a leader.\l
    }}"]
    subgraph cluster_pending_reads {
      graph[label="pending_reads";fontsize=20;style="rounded,dashed";color="slategrey"]
      pending_reads_pop_front;
      pending_reads_push_front;
    }
    Ready[style_struct;label="{{Ready|
    <read_states> read_states: Vec\<ReadState\>,\l|
    ...
    }}"]
    Ready -> ReadState;
    Ready -> apply_reads[style_edge_data];
    ReadState[style_func;label="{{ReadState|
        pub index: u64,\l|
        这里的request_ctx就是\l 
        上面传过来的uuid\l
        pub request_ctx: Vec\<u8\>,\l
    }}"]
    ready_to_handle_read[style_func;label="{{
      ready_to_handle_read|
        self.get_store().applied_index_term() == self.term()\l
        && !self.is_splitting()\l
        && !self.is_merging()\l
    }}"]
    
    collect_ready -> handle_raft_ready_append;
    handle_raft_ready_append -> {
      apply_reads;
    }
    apply_reads -> {
      advance_replica_reads;
      advance_leader_reads;
      post_pending_read_index_on_replica;
      ready_to_handle_read;
      response_read;
    }[color="red"];
    post_pending_read_index_on_replica -> {
      pending_reads_pop_front;
      addition_request_is_some;
      pending_reads_push_front;
      response_read;
      ready_to_handle_unsafe_replica_read;
    }
    response_read[style_func;label="{{
      response_read|
      遍历read.cmds\l
    }}"]
    //cb_invoke_read[style_func;label="{{
    //  cb_invoke_read|
    //  调用cmd中的cb回调函数
    //}}"]
    //handle_read[style_func;label="{{handle_read|
    //生成read response
    //}}"]
    ready_to_handle_unsafe_replica_read[style_func;label="{{ready_to_handle_unsafe_replica_read|
        self.get_store().applied_index() \>= read_index\l
        && self.pending_merge_state.is_none()\l
        && !self.is_applying_snapshot()\l|
        Wait util the follower applies all vlaues before\l
        read\l
    }}"]
    ready_to_handle_unsafe_replica_read -> response_read[style_edge_data];
    /*
    response_read -> {
      read_locked_take;
      cb_invoke_read;
      handle_read;
      get_replica_read;
      notify_stale_req;
    }
    read_index[style_var;label="{{
      read_index
    }}"]
    read_index -> handle_read;
    handle_read -> ReadResponse -> cb_invoke_read;
    */
  }
}
